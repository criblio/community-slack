{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Slack Team Inviter Lambda and API Gateway",
  "Parameters": {
    "SlackTeamSubDomain": {
      "Type": "String",
      "Description": "The Slack team sub-domain."
    },
    "SlackAuthToken": {
      "Type": "String",
      "Description": "The Slack authentication token.",
      "NoEcho": true
    },
    "Origin": {
      "Description": "Origin URL for CORS",
      "Type": "String"
    }
  },
  "Resources": {
    "LambdaApiGatewayExecutionPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "SlackInviterLambda",
            "Arn"
          ]
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "SlackInviterRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "CreateInviteModel": {
      "Type": "AWS::ApiGateway::Model",
      "Properties": {
        "ContentType": "application/json",
        "Name": "CreateInvite",
        "RestApiId": {
          "Ref": "SlackInviterRestApi"
        },
        "Schema": {
          "$schema": "http://json-schema.org/draft-04/schema#",
          "title": "CreateInvite",
          "type": "object",
          "properties": {
            "email": {
              "type": "string"
            },
            "channel": {
              "type": "string"
            },
            "restricted": {
              "type": "boolean"
            }
          },
          "required": [
            "email"
          ]
        }
      }
    },
    "ResponseModel": {
      "Type": "AWS::ApiGateway::Model",
      "Properties": {
        "ContentType": "application/json",
        "Name": "Response",
        "RestApiId": {
          "Ref": "SlackInviterRestApi"
        },
        "Schema": {
          "$schema": "http://json-schema.org/draft-04/schema#",
          "title": "Response",
          "type": "object",
          "properties": {
            "ok": {
              "type": "boolean"
            },
            "error": {
              "type": "string"
            }
          },
          "required": [
            "ok"
          ]
        }
      }
    },
    "SlackInviterExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": {
            "Effect": "Allow",
            "Principal": {
              "Service": "lambda.amazonaws.com"
            },
            "Action": "sts:AssumeRole"
          }
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "root",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ],
        "RoleName": {
          "Fn::Join": [
            "",
            [
              "lambda-logs-",
              {
                "Ref": "AWS::Region"
              }
            ]
          ]
        }
      }
    },
    "SlackInviterLoggingRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": {
            "Effect": "Allow",
            "Principal": {
              "Service": "apigateway.amazonaws.com"
            },
            "Action": "sts:AssumeRole"
          }
        },
        "Path": "/",
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"
        ],
        "RoleName": {
          "Fn::Join": [
            "",
            [
              "apigateway-logs-",
              {
                "Ref": "AWS::Region"
              }
            ]
          ]
        }
      }
    },
    "SlackInviterRestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "SlackInviterRestApi",
        "Description": "A REST API for Slack"
      }
    },
    "SlackInviterRestApiAccount": {
      "Type": "AWS::ApiGateway::Account",
      "DependsOn": [
        "SlackInviterRestApi",
        "SlackInviterLoggingRole"
      ],
      "Properties": {
        "CloudWatchRoleArn": {
          "Fn::GetAtt": [
            "SlackInviterLoggingRole",
            "Arn"
          ]
        }
      }
    },
    "SlackInviterResource": {
      "Type": "AWS::ApiGateway::Resource",
      "DependsOn": [
        "SlackInviterRestApi"
      ],
      "Properties": {
        "RestApiId": {
          "Ref": "SlackInviterRestApi"
        },
        "ParentId": {
          "Fn::GetAtt": [
            "SlackInviterRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "invite"
      }
    },
    "SlackInviterOptionsMethod": {
      "Type": "AWS::ApiGateway::Method",
      "DependsOn": [
        "SlackInviterResource"
      ],
      "Properties": {
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "RestApiId": {
          "Ref": "SlackInviterRestApi"
        },
        "ResourceId": {
          "Ref": "SlackInviterResource"
        },
        "HttpMethod": "OPTIONS",
        "Integration": {
          "IntegrationHttpMethod": "OPTIONS",
          "Type": "MOCK",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "SlackInviterLambda",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          },
          "PassthroughBehavior": "WHEN_NO_MATCH",
          "RequestTemplates": {
            "application/json": "{ \"statusCode\": 200 }"
          },
          "IntegrationResponses": [
            {
              "ResponseTemplates": {
                "application/json": "{}"
              },
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Credentials": "'true'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'POST,OPTIONS'",
                "method.response.header.Access-Control-Allow-Origin": {
                  "Fn::Join": [
                    "",
                    [
                      "'",
                      {
                        "Ref": "Origin"
                      },
                      "'"
                    ]
                  ]
                }
              },
              "StatusCode": 200
            }
          ]
        },
        "RequestParameters": {
          "method.request.header.Origin": true,
          "method.request.header.Access-Control-Request-Method": true,
          "method.request.header.Access-Control-Request-Headers": true
        },
        "MethodResponses": [
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Credentials": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "StatusCode": 200
          }
        ]
      }
    },
    "SlackInviterPostMethod": {
      "Type": "AWS::ApiGateway::Method",
      "DependsOn": [
        "SlackInviterResource",
        "SlackInviterLambda",
        "SlackInviterOptionsMethod"
      ],
      "Properties": {
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "RestApiId": {
          "Ref": "SlackInviterRestApi"
        },
        "ResourceId": {
          "Ref": "SlackInviterResource"
        },
        "HttpMethod": "POST",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "SlackInviterLambda",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          },
          "PassthroughBehavior": "WHEN_NO_MATCH",
          "IntegrationResponses": [
            {
              "ResponseTemplates": {
                "application/json": "$input.json('$.body')"
              },
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'POST,OPTIONS'",
                "method.response.header.Access-Control-Allow-Origin": {
                  "Fn::Join": [
                    "",
                    [
                      "'",
                      {
                        "Ref": "Origin"
                      },
                      "'"
                    ]
                  ]
                }
              },
              "StatusCode": 200
            }
          ]
        },
        "RequestModels": {
          "application/json": {
            "Ref": "CreateInviteModel"
          }
        },
        "RequestParameters": {
          "method.request.header.Origin": true,
          "method.request.header.Access-Control-Request-Method": true,
          "method.request.header.Access-Control-Request-Headers": true
        },
        "MethodResponses": [
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "StatusCode": 200
          }
        ]
      }
    },
    "SlackInviterLambda": {
      "Type": "AWS::Lambda::Function",
      "DependsOn": [
        "SlackInviterExecutionRole"
      ],
      "Properties": {
        "Runtime": "nodejs4.3",
        "Handler": "index.handler",
        "FunctionName": "SlackInviterLambdaFunction",
        "Role": {
          "Fn::GetAtt": [
            "SlackInviterExecutionRole",
            "Arn"
          ]
        },
        "Code": {
          "ZipFile": {
            "Fn::Join": [
              "",
              [
                "'use strict';\n",
                "const slack_team = '",
                {
                  "Ref": "SlackTeamSubDomain"
                },
                "';\n",
                "const slack_token = '",
                {
                  "Ref": "SlackAuthToken"
                },
                "';\n",
                "const https = require('https');\n",
                "exports.handler = (event, context, callback) => {\n",
                "  console.log('event: ' + JSON.stringify(event));\n",
                "  const stamp = (new Date().getTime());\n",
                "  const options = {\n",
                "    hostname: slack_team + '.slack.com',\n",
                "    port: 443,\n",
                "    path: '/api/users.admin.invite?t=' + stamp + '&token=' + slack_token,\n",
                "    method: 'POST',\n",
                "    headers: {\n",
                "        'Content-Type': 'application/x-www-form-urlencoded'\n",
                "    }\n",
                "  };\n",
                "  const origin = event.headers.Origin;\n",
                "  const responseHeaders = { 'Access-Control-Allow-Origin': origin, 'Access-Control-Allow-Credentials': true };\n",
                "  const req = https.request(options, (res) => {\n",
                "    let responseBody = '';\n",
                "    res.setEncoding('utf8');\n",
                "    res.on('data', (chunk) => responseBody += chunk);\n",
                "    res.on('end', () => {\n",
                "      if (res.headers['content-type'] === 'application/json') {\n",
                "        responseBody = JSON.parse(responseBody);\n",
                "      }\n",
                "      callback(null, { headers: responseHeaders, body: JSON.stringify(responseBody) });\n",
                "    });\n",
                "  });\n",
                "\n",
                "  const payload = event.body ? JSON.parse(event.body) : event;\n",
                "  let channels = '';\n",
                "  if (payload.channel) channels = '&channels=' + payload.channel;\n",
                "  let restricted = '';\n",
                "  if (payload.restricted) restricted = '&ultra_restricted=' + payload.restricted;\n",
                "\n",
                "  const params = 'email=' + encodeURIComponent(payload.email) +\n",
                "    '&token=' + slack_token + '&set_active=true' + channels + restricted\n",
                "\n",
                "  req.on('error', callback);\n",
                "  req.write(params);\n",
                "  req.end();\n",
                "}\n"
              ]
            ]
          }
        }
      }
    },
    "SlackInviterDeployment": {
      "Type": "AWS::ApiGateway::Deployment",
      "DependsOn": [
        "SlackInviterOptionsMethod",
        "SlackInviterPostMethod"
      ],
      "Properties": {
        "RestApiId": {
          "Ref": "SlackInviterRestApi"
        },
        "Description": "Production deployment",
        "StageName": "unused_stage"
      }
    },
    "SlackInviterStage": {
      "Type": "AWS::ApiGateway::Stage",
      "DependsOn": [
        "SlackInviterRestApi",
        "SlackInviterDeployment"
      ],
      "Properties": {
        "StageName": "prod",
        "Description": "Production Stage",
        "RestApiId": {
          "Ref": "SlackInviterRestApi"
        },
        "DeploymentId": {
          "Ref": "SlackInviterDeployment"
        },
        "Variables": {
          "Stack": "prod"
        },
        "MethodSettings": [
          {
            "ResourcePath": "/invite",
            "HttpMethod": "OPTIONS",
            "MetricsEnabled": "true",
            "DataTraceEnabled": "true",
            "LoggingLevel": "INFO"
          },
          {
            "ResourcePath": "/invite",
            "HttpMethod": "POST",
            "MetricsEnabled": "true",
            "DataTraceEnabled": "true",
            "LoggingLevel": "INFO"
          }
        ]
      }
    }
  },
  "Outputs": {
    "ApiUrl": {
      "Description": "Invoke URL for your API.",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "SlackInviterRestApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".amazonaws.com/prod/invite"
          ]
        ]
      }
    }
  }
}
